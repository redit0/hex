nmapHelp = function(self)
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" {ip}") + g.l2(" Displays port, whois, and firewall (if available) information for the specified ip address.  If no IP address is specified, will show saved info from the last nmap, if available.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function


/////////////////////////////////////////////////////////////////
//                 Format and print the output.                //
/////////////////////////////////////////////////////////////////

getOutput = function(data)
    retVal = ""

    // Network Info
    retVal = retVal + g.const.nl*2

    retVal = retVal + g.func.heading("Network Information") + g.const.nl

    output = g.const.indent + g.s4("[" + g.b3("public ip: " + data.info.public) + "]<pos=500>[" + g.b3("kernel: " + data.info.kernel) + "]") + g.const.ni
    output = output + g.s4("[" + g.b3("domain: " + data.info.domain) + "]<pos=500>[" + g.b3("admin: " + data.info.admin) + "]") + g.const.ni
    output = output + g.s4("[" + g.b3("email: " + data.info.email) + "]<pos=500>[" + g.b3("phone: " + data.info.phone) + "]") + g.const.ni
    output = output + g.s4("[" + g.b3("essid: " + data.info.essid) + "]<pos=500>[" + g.b3("bssid: " + data.info.bssid) + "]") + g.const.ni
    output = output + g.const.nl

    retVal = retVal + output

    // Firewall Info

    if data.firewall then
        output = ""

        retVal = retVal + g.const.nl + g.func.heading("Firewall Rules") + g.const.nl

        for rule in data.firewall
            output = output + g.const.indent + rule + g.const.nl
        end for

        output = output + g.const.nl*2

        retVal = retVal + output
    end if

    // Devices/Ports Info

    output = ""

    retVal = retVal + g.const.nl + g.func.heading("Devices") + g.const.nl

    indices = data.devices.indexes

    deviceList = []

    for item in data.devices
        deviceList.push(item.value)
    end for

    deviceList.sort("sortKey").reverse

    for device in deviceList

        output = output + g.const.indent
        
        header = "<size=16>" + device.address + "<pos=200>/</size>"
        
        if device.address == data.info.router.local_ip then
            output = output + g.o1(header) + g.const.nl
        else
            output = output + g.s4(header) + g.const.nl
        end if

        if device.ports.len > 0 then
            for port in device.ports
                if port.address == device.address then
                    line = g.const.indent + "<pos=200>| " + port.number + "<pos=350>" + "[" + port.status + "]" + "<pos=550>" + port.service + g.const.nl

                    if port.status == "open" then
                        output = output + g.g2(line)
                    else if port.status == "internal" then
                        output = output + g.l3(line)
                    else if port.status == "closed" then
                        output = output + g.d1(line)
                    end if
                end if
            end for
        else
            output = output + g.const.indent + g.d1("<pos=200><size=14>(none)</size>") + g.const.nl
        end if
    end for

    retVal = retVal + output

    return retVal
end function


/////////////////////////////////////////////////////////////////
//                        Do the scan.                         //
/////////////////////////////////////////////////////////////////

doNmap = function(ip)
    deviceList = []

    getDevices = function(router)
        if router == null then return

        ip = router.local_ip

        if deviceList.indexOf(ip) == null then deviceList.push(ip)

        devices = router.devices_lan_ip

        for device in devices
            if device != ip then
                type = getType(device)

                if type == "router" and deviceList.indexOf(device) == null then
                    deviceList.push(device)
                    getDevices(get_router(device))
                else if type == "switch" and deviceList.indexOf(device) == null then
                    deviceList.push(device)
                    getDevices(get_switch(device))
                else if type == "device" and deviceList.indexOf(device) == null then
                    deviceList.push(device)
                end if
            end if
        end for
    end function

    getType = function(ip)
        if get_switch(ip) then return "switch"
        if get_router(ip) then return "router"
        return "device"
    end function

    router = get_router(ip)

    if not router then
        if is_lan_ip(ip) then
            router = get_router
        else
            print g.error("Could not reach: " + ip)
            return
        end if
    end if

    getDevices(router)

    results = {}

    // Whois Info
    results.info = {}

    lines = whois(router.public_ip).split(char(10))

    results.info.domain = lines[0].split(":")[1].trim
    results.info.admin = lines[1].split(":")[1].trim
    results.info.email = lines[2].split(":")[1].trim
    results.info.phone = lines[3].split(":")[1].trim
    results.info.public = router.public_ip
    results.info.kernel = router.kernel_version
    results.info.bssid = router.bssid_name
    results.info.essid = router.essid_name
    results.info.router = router

    // Firewall Info
    results.firewall = router.firewall_rules

    // Devices/Ports
    devices = {}

    usedPorts = router.used_ports

    // There might be ports in used_ports that are forwarded to devices we haven't found yet
    for port in usedPorts
        if deviceList.indexOf(port.get_lan_ip) == null then deviceList.push(port.get_lan_ip)
    end for

    for device in deviceList
        if devices.hasIndex(device) then continue

        deviceInfo = {
            "address": device,
            "ports": [],
            "isRouter": 0,
            "sortKey": 0
        }

        devicePorts = router.device_ports(device)

        if typeof(devicePorts) == "string" or devicePorts == null then
            print g.error(devicePorts)
            devicePorts = []
        end if

        // There might be ports in used_ports that are forwarded to this device that aren't included in device_ports
        for port in usedPorts
            if port.get_lan_ip == device then
                addPort = 1
                for devicePort in devicePorts
                    if devicePort.get_lan_ip == device and devicePort.port_number == port.port_number then addPort = 0
                end for
                if addPort then
                    devicePorts.push(port)
                end if
            end if
        end for

        if typeof(devicePorts) == "list" then
            for port in devicePorts
                portInfo = {
                    "number": port.port_number,
                    "address": port.get_lan_ip,
                    "service": router.port_info(port)
                }

                if port.is_closed then
                    portInfo.status = "closed"
                    deviceInfo.sortKey = deviceInfo.sortKey + 1
                else
                    portInfo.status = "internal"
                    deviceInfo.sortKey = deviceInfo.sortKey + 10
                end if
                
                for p in usedPorts
                    if p.port_number == port.port_number and p.get_lan_ip == device and not p.is_closed then
                        portInfo.status = "open"
                        deviceInfo.sortKey = deviceInfo.sortKey + 100
                    end if
                end for

                if port.port_number == 8080 then deviceInfo.isRouter = 1

                deviceInfo.ports.push(portInfo)
            end for
        end if

        if device == router.local_ip then
            deviceInfo.ports.push({"number":0,"status":"open","service":"kernel " + router.kernel_version,"address":device})
            deviceInfo.sortKey = deviceInfo.sortKey + 1000
        end if

        deviceInfo.ports.sort("number")

        devices[device] = deviceInfo
    end for

    results.devices = devices

    return results
end function


///////////////////////////////////////////////////////////////////////////
//    Main entry point. Handle arguments, call out to other functions    //
///////////////////////////////////////////////////////////////////////////

nmap = function(args = null)
    if not args or args == [] then
        if not self.data.hasIndex("saved") then
            print(g.error("No saved data to display."))
        else
            print getOutput(self.data.saved)
        end if
    else if args.len > 1 or args[0] == "-h" or args[0] == "help" then
        self.help
    else if args.len == 1 and is_valid_ip(args[0]) then
        if get_shell.host_computer.public_ip != g.stack[g.context.index].public then
            src = "g = get_custom_object" + char(10) + "g.tools.nmap.exec([""" + args[0] + """])"
    
            g.func.run(src)
        else
            results = doNmap(args[0])

            if results != null then
                g.tools.nmap.data.saved = results
    
                print getOutput(results)
            end if
        end if
    else
        self.help
    end if

    return
end function

g.tools.nmap = {
    "name": "nmap",
    "shortDescription": "Displays port and whois information.",
    "exec": @nmap,
    "help": @nmapHelp,
    "data": {}
}