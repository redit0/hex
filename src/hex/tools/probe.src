probeHelp = function() 
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [ip]") + g.l2(" Displays port and whois information for the specified ip address")
    text = text + g.g2(self.name) + g.b3(" [-s/show]") + g.l2(" Displays previously scanned port and whois information") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

probe = function(args)
    if args.len == 0 or args.len > 1 or args[0] == "-h" or args[0] == "help" then
        self.help
        return
    end if

    if args[0] == "-s" or args[0] == "show" then
        if self.data.hasIndex("saved") then
            print(self.data.saved)
        else
            print(g.const.indent + g.error("No saved probe information."))
        end if
        return
    end if

    if not is_valid_ip(args[0]) then
        print(g.const.indent + g.error("Invalid argument: " + args[0]))
        return
    end if

    address = args[0]

    isLan = is_lan_ip(address)

    if isLan then
        router = get_router(address)
        if router then
            isRouter = 1
        else
            isRouter = 0
            router = get_router
        end if
    else
        router = get_router(address)
        isRouter = 1
    end if

    if not router then
        print(g.const.indent + g.error("Could not connect to IP: " + address))
        return
    end if

    adminInfo = whois(address)
    infoLines = adminInfo.split(char(10))

    infoObject = {}
    
    infoObject.domain = infoLines[0].split(":")[1].trim
    infoObject.admin = infoLines[1].split(":")[1].trim
    infoObject.email = infoLines[2].split(":")[1].trim
    infoObject.phone = infoLines[3].split(":")[1].trim

    output = g.const.nl + g.const.indent + g.const.llb + g.const.ni
    output = output + g.s4("[" + g.b3("public ip: " + router.public_ip) + "] [" + g.b3("domain: " + infoObject.domain) + "] [" + g.b3("kernel_router.so: " + router.kernel_version) + "]") + g.const.ni
    output = output + g.s4("[" + g.b3("admin: " + infoObject.admin) + "] [" + g.b3("email: " + infoObject.email) + "] [" + g.b3("phone: " + infoObject.phone) + "]") + g.const.ni
    output = output + g.const.llb + g.const.nl + g.const.ni
    
    if router.firewall_rules.len > 0 then
        output = output + g.b1("<size=18>Firewall Rules</size>") + g.const.ec + g.const.ni

        for rule in router.firewall_rules
            output = output + rule + g.const.ni
        end for
        
        output = output + g.const.llb + g.const.ni
    end if

    sPorts = []

    if not isRouter then
        ports = router.device_ports(address)

        sPorts = sPorts + ports

        output = output + address + g.const.ni

        for port in ports
            output = output + g.g2("- " + port.port_number + g.const.tab + g.const.tab + "[open]" + g.const.tab + g.const.tab + "(" + router.port_info(port) + ")") + g.const.ni
        end for
    else
        ports = []

        for add in router.devices_lan_ip
            ports = ports + router.device_ports(add)
        end for

        rPorts = []

        sPorts = sPorts + router.used_ports

        for rPort in router.used_ports
            rPorts.push(rPort.port_number + ":" + rPort.get_lan_ip)
        end for

        ports.sort("get_lan_ip")

        devices = {}

        if isRouter then
            if not devices.hasIndex(router.local_ip) then devices[router.local_ip] = []

            devices[router.local_ip].push(g.g2("- 0" + g.const.tab + g.const.tab + g.const.tab + "[open]" + g.const.tab + g.const.tab + g.const.tab + "(kernel " + router.kernel_version + ")") + g.const.ni)
        end if

        for port in ports
            if not devices.hasIndex(port.get_lan_ip) then devices[port.get_lan_ip] = []

            isClosed = 1

            if rPorts.indexOf(port.port_number + ":" + port.get_lan_ip) != null then isClosed = 0

            if port.port_number == 8080 and port.get_lan_ip != router.local_ip then
                devices[port.get_lan_ip].push(g.d1("- 0" + g.const.tab + g.const.tab + g.const.tab + "[closed]" + g.const.tab + g.const.tab + "(kernel " + router.kernel_version + ")") + g.const.ni)
            end if

            if not isClosed then
                line = g.g2("- " + port.port_number + g.const.tab + g.const.tab + "[open]" + g.const.tab + g.const.tab + g.const.tab + "(" + router.port_info(port) + ")") + g.const.ni
            else
                if port.is_closed then
                    line = g.d1("- " + port.port_number + g.const.tab + g.const.tab + "[closed]" + g.const.tab + g.const.tab + "(" + router.port_info(port) + ")") + g.const.ni
                else
                    line = g.b1("- " + port.port_number + g.const.tab + g.const.tab + "[internal]" + g.const.tab + g.const.tab + "(" + router.port_info(port) + ")") + g.const.ni
                end if
            end if

            if devices[port.get_lan_ip].indexOf(line) == null then devices[port.get_lan_ip].push(line)
        end for

        for index in devices.indexes
            output = output + g.l1(index) + g.const.ni

            lines = devices[index]

            lines.sort

            for line in lines
                output = output + line
            end for
        end for
    end if

    output = output + g.const.nl

    self.data.saved = output
    self.data.ports = sPorts

    output = output + g.const.indent + g.const.llb + g.const.nl + g.const.ni + g.b3("<size=20>Enter a port to scan or a lan ip address:</size>") + g.const.nl + g.const.ni + g.const.llb + g.const.ni

    print(output)

    choices = g.const.indent + g.b3(address + ":*" + g.const.tab + g.const.tab + "(All Open Ports)") + g.const.ni

    choices = choices + g.s2(address + ":0" + g.const.tab + g.const.tab +  "(kernel " + router.kernel_version + ")") + g.const.ni


    for port in sPorts
        if port.port_number > 999 then
            choices = choices + g.s2(address + ":" + port.port_number + g.const.tab + "(" + router.port_info(port) + ")") + g.const.ni
        else
            choices = choices + g.s2(address + ":" + port.port_number + g.const.tab + g.const.tab + "(" + router.port_info(port) + ")") + g.const.ni
        end if
    end for

    choices = choices + g.r1("Return to Main Menu") + g.const.nl + g.const.ni + char(187) + " "

    choice = user_input(choices)

    if (choice == "q") then
        g.tools.clear.exec
        return
    end if

    if is_valid_ip(choice) then
        g.tools.scan.exec(address + " 0 " + choice)
    else
        g.tools.scan.exec(address + " " + choice)
    end if
end function

g.tools.probe = {
    "name": "probe",
    "text": g.s2("probe"),
    "sortOrder": 0,
    "exec": @probe,
    "help": @probeHelp,
    "data": {
        "ports": [],
        "saved": ""
    }
}