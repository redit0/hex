if not g.hasIndex("t") then g.t = {}

scan = function(args)
    text = g.c.ni + "Usage:".yellow("bu") + g.c.ni
    text = text + "scan".green + lightgray(" Scans for vulnerabilities at the ip address and port saved as the current " + g.c.targettext + ".") + g.c.ni
    text = text + "scan".green + " [ip] {port}".cyan + lightgray(" Scans for vulnerabilities at the specified ip address and port. If the port is omitted it will scan kernel_router instead.") + g.c.ni
    text = text + "scan".green + " [-s/show]".cyan + lightgray(" Displays list of previously scanned vulnerabilities for the " + g.c.targettext + " ip address") + g.c.ni
    text = text + "scan".green + " [-h/help]".cyan + lightgray(" Display this help text") + g.c.nl

    if args.len > 2 then
        print(text)
        return
    end if

    if args.len == 2 then
        if is_valid_ip(args[0]) and typeof(args[1].to_int) == "number" and args[1].to_int >= 0 and args[1].to_int <= 65535 then
            g.target.ip = args[0]
            g.target.port = args[1].to_int
        else if not is_valid_ip(args[0]) then
            print(g.c.indent + red("[Error] Invalid argument: " + args[0], "b"))
            return
        else if typeof(args[1].to_int) != "number" or args[1].to_int < 0 or args[1].to_int > 65535 then
            print(g.c.indent + red("[Error] Invalid argument: " + args[1], "b"))
            return
        end if
    end if

    if args.len == 1 then
        if args[0] == "-h" or args[0] == "help" then
            print(text)
            return
        else if is_valid_ip(args[0]) then
            g.target.ip = args[0]
        else
            print(g.c.indent + red("[Error] Invalid argument: " + args[0], "b"))
            return
        end if
    end if

    if not g.target.hasIndex("ip") or not is_valid_ip(g.target.ip) then
        print(g.c.indent + red("[Error] There is currently no saved " + g.c.targettext + ".", "b"))
        return
    end if

    if not g.target.hasIndex("port") or typeof(g.target.port) != "number" or g.target.port < 0 or g.target.port > 65535 then g.target.port = 0

    print("not implemented")
end function

g.t.scan = {
    "name": "scan",
    "text": "scan".cyan("b"),
    "sortOrder": 1,
    "exec": @scan
}