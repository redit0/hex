scanHelp = function()
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [ip] {port}") + g.l2(" Scans for vulnerabilities at the specified ip address and port. If the port is omitted it will scan all open ports instead.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [library.so]") + g.l2(" Scans for vulnerabilities in the specified local library.  Use the full file name for the library, including the '.so' extension.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Display this help text") + g.const.nl

    print(text)
end function

doScan = function(args)
    idx = g.context.index
    context = g.stack[idx]
    if not g.tools.scan.data.hasIndex("silent") then g.tools.scan.data.silent = 0

    doOutput = function(metaLibs)
        results = {}

        for metaLib in metaLibs
            if not results.hasIndex(metaLib.lib_name) then
                results[metaLib.lib_name] = {}
            end if

            if not results[metaLib.lib_name].hasIndex(metaLib.version) then
                results[metaLib.lib_name][metaLib.version] = {}
            end if
        end for

        libs = results.indexes
        libs.sort

        output = g.const.nl + g.func.heading("Scan Results") + g.const.nl
        for lib in libs
            output = output + g.const.indent + g.s2("Library: " + lib) + g.const.nl

            versions = results[lib].indexes
            versions.sort

            for version in versions
                output = output + g.const.indent + "  " + g.s3("Version: " + version) + g.const.nl

                mems = g.database[lib][version].indexes
                mems.sort

                for mem in mems
                    output = output + g.const.indent + "    " + g.s4("Address: " + mem) + g.const.nl

                    values = g.database[lib][version][mem].indexes
                    values.sort

                    for value in values
                        output = output + g.const.indent + "      <size=80%>" + g.o1("Value: " + value + "<pos=550>Result: " + g.database[lib][version][mem][value]) + g.const.nl
                    end for
                end for
            end for
        end for
        clear_screen
        print output
        return
    end function

    scanMetaLibs = function(metaLibs)
        for metaLib in metaLibs
            if not g.database.hasIndex(metaLib.lib_name) then
                g.database[metaLib.lib_name] = {}
            end if

            if not g.database[metaLib.lib_name].hasIndex(metaLib.version) then
                g.database[metaLib.lib_name][metaLib.version] = {}
            end if

            rescan = 0

            // Check to see if we need to rescan this lib/version.
            mems = g.database[metaLib.lib_name][metaLib.version].indexes

            if not mems or mems.len == 0 then rescan = 1

            for mem in mems
                if rescan == 1 then break
                values = g.database[metaLib.lib_name][metaLib.version][mem].indexes

                if not values or values.len == 0 then rescan = 1

                for value in values
                    if rescan == 1 then break
                    if g.database[metaLib.lib_name][metaLib.version][mem][value] == "" then
                        rescan = 1
                        break
                    end if
                end for
            end for

            if rescan then
                mems = g.stack["0"].metax.scan(metaLib)

                for mem in mems
                    g.database[metaLib.lib_name][metaLib.version][mem] = {}

                    vulns = g.stack["0"].metax.scan_address(metaLib, mem).split("Unsafe check: ")[1:]
                    for vuln in vulns
                        value = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]

                        g.database[metaLib.lib_name][metaLib.version][mem][value] = ""
                    end for
                end for
            end if
        end for
    end function

    scanLocal = function(libName)
        if not context.shell then
            print(g.error("No shell available"))
            return
        end if

        if not context.metax then
            print(g.error("No metaxploit library available"))
            return
        end if

        metaLib = context.metax.load(libName)

        if not metaLib then
            print(g.error("Could not load library: " + libName))
            return
        end if

        metaLibs = [metaLib]
        scanMetaLibs(metaLibs)
        if not g.tools.scan.data.silent then
            doOutput(metaLibs)
        end if
    end function

    scanRemote = function(ip, port)
        if not context.shell then
            print(g.error("No shell available"))
            return
        end if

        if g.hasIndex("proxy") and g["proxy"] != "" and typeof(g["proxy"].to_int) == "number" then
            proxy = g.stack[g.proxy]
            netSession = proxy.metax.net_use(ip, port)
        else
            netSession = context.metax.net_use(ip, port)
        end if

        if typeof(netSession) == "string" then
            print g.error(netSession)
            return
        else if netSession == null then
            print g.error("Could not connect to " + ip + ":" + port + " (" + typeof(port) + ")")
            return
        end if

        metaLib = netSession.dump_lib

        metaLibs = [metaLib]

        scanMetaLibs(metaLibs)
        if not g.tools.scan.data.silent then
            doOutput(metaLibs)
        end if
    end function

    scanAllPorts = function(ip)
        if g.hasIndex("proxy") and g["proxy"] != "" and typeof(g["proxy"].to_int) == "number" then
            context = g.stack[g.proxy]
        end if

        if not context.shell then
            print(g.error("No shell available"))
            return
        end if

        router = g.func.getRouter(ip)

        if not router then
            print(g.error("Could not find router at " + ip))
            return
        end if

        ports = router.used_ports

        metaLibs = []

        for port in ports
            if port.is_closed then continue

            netSession = context.metax.net_use(ip, port.port_number)

            if not netSession then
                print(g.error("Could not connect to " + ip + ":" + port.port_number))
            else if typeof(netSession) == "string" then
                print(g.error(netSession))
            else
                metaLib = netSession.dump_lib

                metaLibs.push(metaLib)
            end if
        end for

        netSession = context.metax.net_use(ip, 0)

        metaLib = netSession.dump_lib

        metaLibs.push(metaLib)

        scanMetaLibs(metaLibs)
        
        if not g.tools.scan.data.silent then
            doOutput(metaLibs)
        end if
    end function

    if not args or args == [] then
        self.help
    else if args.len == 1 then
        arg = args[0]

        if arg == "-h" or arg == "help" then
            self.help
        else if not is_valid_ip(arg) then
            if not arg.is_match(".+\.so") then
                print(g.const.indent + g.error("Invalid library name. (Usage: scan [library.so])"))
                return
            end if
            scanLocal("/lib/" + arg)
        else if is_valid_ip(arg) then
            scanAllPorts(arg)
        else
            print(g.const.indent + g.error("Invalid argument: " + arg))
        end if
    else if args.len == 2 then
        address = args[0]
        port = args[1]

        if not is_valid_ip(address) then
            print(g.const.indent + g.error("Invalid IP address: " + address))
            return
        end if

        if port.val == null or port.to_int < 0 or port.to_int > 65535 then
            print(g.const.indent + g.error("Invalid port number: " + port))
            return
        end if

        scanRemote(address, port.to_int)
    end if
end function

g.tools.scan = {
    "name": "scan",
    "shortDescription": "Scans for vulnerabilities.",
    "exec": @doScan,
    "help": @scanHelp,
    "data": {}
}