scanHelp = function()
    text = g.const.ni + g.func.yellow("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [ip] {port}") + g.l2(" Scans for vulnerabilities at the specified ip address and port. If the port is omitted it will scan kernel_router instead.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-s/show]") + g.l2(" Displays list of previously scanned vulnerabilities") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Display this help text") + g.const.nl

    print(text)
end function

doScan = function(args)
    if args.len == 0 or args.len > 3 then
        self.help
        return
    end if

    if args.len == 2 then
        if is_valid_ip(args[0]) and args[1] isa number and args[1].to_int >= 0 and args[1].to_int <= 65535 then
            address = args[0]
            port = args[1].to_int
        else if not is_valid_ip(args[0]) then
            print(g.const.indent + g.error("Invalid argument: " + args[0]))
            return
        else if not args[1] isa number or args[1].to_int < 0 or args[1].to_int > 65535 then
            print(g.const.indent + g.error("Invalid argument: " + args[1]))
            return
        end if
    end if

    if args.len == 1 then
        if args[0] == "-h" or args[0] == "help" then
            self.help
            return
        else if is_valid_ip(args[0]) then
            address = args[0]
            port = 0
        else
            print(g.const.indent + g.error("Invalid argument: " + args[0]))
            return
        end if
    end if

    g.error("Not implemented")
end function

g.tools.scan = {
    "name": "scan",
    "text": g.s2("scan"),
    "sortOrder": 1,
    "exec": @doScan,
    "help": @scanHelp,
    "data": {}
}