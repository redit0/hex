// Retrieves the user based on file permissions.
// @param {file} file - The file to check permissions on.
// @param {number} color - Whether to return the username in color (1) or not (0).
// @return {string} - The username.
g.func.getUser = function(file, color = 0)
    while file.path != "/"
        file = file.parent
    end while

    if file.has_permission("w") then
        if color then return g.r1("root") else return "root"
    end if

    for folder in file.get_folders
        if folder.name == "home" then
            for userDir in folder.get_folders
                if userDir.has_permission("w") and userDir.name != "guest" then
                    if color then return g.b2(userDir.name) else return userDir.name
                end if
            end for
        end if
    end for

    if color then return g.l3("guest") else return "guest"
end function

// Recursively finds a folder by path.
// @param {folder} folder - The starting folder.
// @param {string} path - The path to search for.
// @return {folder|null} - The found folder or null if not found.
g.func.findFolder = function(folder, path)
    if folder.path == path or folder.name == path then return folder

    for subFolder in folder.get_folders
        result = g.func.findFolder(subFolder, path)

        if result then return result
    end for

    return null
end function

// Finds a writable folder starting from the given file.
// @param {file} file - The starting file or folder.
// @return {folder|null} - The writable folder or null if not found.
g.func.findWritableFolder = function(file)
    if file.is_folder and file.has_permission("w") then return file

    for folder in file.get_folders
        result = g.func.findWritableFolder(folder)

        if result then return result
    end for

    return null
end function

// Recursively finds a file by name.
// @param {file} file - The starting file or folder.
// @param {string} name - The name of the file to search for.
// @return {file|null} - The found file or null if not found.
g.func.findFile = function(file, name)
    if file.name == name and not file.is_folder then return file

    files = file.get_files + file.get_folders

    for temp in files
        if temp.name == name and not temp.is_folder then return temp

        if temp.is_folder then
            result = g.func.findFile(temp, name)

            if result then return result
        end if
    end for

    return null
end function

// **Find:**
// Finds files (and folders) matching a pattern with optional flags.  Use * as a wildcard character.
// @description **Flags:**
// @description  b - Binary Files (excluding folders)
// @description  f - Folders Only
// @description  t - Text Files
// @description  r - Can Read
// @description  w - Can Write
// @description  x - Can Execute
// @example g.func.find(file, "*.so", "br") // Finds all readable libraries (binary files ending in ".so" with the permission "r")
// @example g.func.find(file, "passwd", "t") // Finds all text files named "passwd"
// @example g.func.find(file, "guest", "f") // Finds all folders named "guest"
// @param {file} file - The starting file or folder.
// @param {string} name - The pattern to match file names against.
// @param {string|null} flags - Optional flags to filter results.
// @return {list<file>} - The list of matching files.
g.func.find = function(file, name, flags = null)
    pattern = name.replace("\.", "\.").replace("\*", ".*")
    b = flags != null and flags.indexOf("b") != null // Binary Files
    f = flags != null and flags.indexOf("f") != null // Folders
    t = flags != null and flags.indexOf("t") != null // Text Files
    r = flags != null and flags.indexOf("r") != null // Can Read
    w = flags != null and flags.indexOf("w") != null // Can Write
    x = flags != null and flags.indexOf("x") != null // Can Execute

    results = []

    if file.name.is_match(pattern) or file.path == name then
        isMatch = 1

        if b and (not file.is_binary or file.is_folder) then isMatch = 0
        if f and not file.is_folder then isMatch = 0
        if t and file.is_binary then isMatch = 0
        if r and not file.has_permission("r") then isMatch = 0
        if w and not file.has_permission("w") then isMatch = 0
        if x and not file.has_permission("x") then isMatch = 0

        if isMatch then results.push(file)
    end if
    
    if file.is_folder then
        files = file.get_files + file.get_folders

        for temp in files
            results = results + g.func.find(temp, name, flags)
        end for
    end if

    return results
end function

// Recursively finds files by name.
// @param {file} file - The starting file or folder.
// @param {string} name - The name of the file to search for.
// @return {list<file>} - The found files or an empty list if none are found.
g.func.findFiles = function(file, name)
    results = []
    if file.name == name and not file.is_folder then results.push(file)

    files = file.get_files + file.get_folders

    for temp in files
        if temp.name == name and not temp.is_folder then results.push(temp)

        if temp.is_folder then
            results = results + g.func.findFiles(temp, name)
        end if
    end for

    return results
end function

// Generates a random valid IP address that is not a LAN IP.
// @return {string} - The generated IP address.
g.func.getRandomIp = function
    ip = ""

    while not is_valid_ip(ip) or is_lan_ip(ip)
        min = 0
        max = 255
        first = floor(rnd * (max - min + 1) + min)
        second = floor(rnd * (max - min + 1) + min)
        third = floor(rnd * (max - min + 1) + min)
        fourth = floor(rnd * (max - min + 1) + min)

        ip = first + "." + second + "." + third + "." + fourth
    end while

    return ip
end function

// Creates a heading string centered within two lines of ='s.
// @param {string} str - The string to center.
// @return {string} - The formatted heading.
g.func.heading = function(str)
    pos = (g.const.ll - str.len) / 2

    heading = g.const.indent + g.const.llb + g.const.ni
    heading = heading + g.b3(" "*pos + "<size=20>" + str + "</size>") + g.const.ni
    heading = heading + g.const.llb + g.const.nl

    return heading
end function

// Retrieves repository addresses from sources.txt.
// @return {list<string>} - A list of repository addresses.
g.func.getRepos = function()
    context = g.stack[g.context.index]

    if not context.computer then
        print(g.error("No computer object found."))
        return null
    end if

    sources = context.computer.File("/etc/apt/sources.txt")

    if not sources then
        print(g.error("Could not locate sources.txt"))
        return null
    end if

    if not sources.has_permission("r") then
        print(g.error("Could not read sources.txt"))
        return null
    end if

    matches = sources.get_content.matches(g.const.ipPattern)

    addresses = []

    for index in matches.indexes
        addresses.push(matches[index])
    end for

    return addresses
end function

// Retrieves the apt client library.
// @return {aptclientLib|null} - The apt client object or null if not found.
g.func.getApt = function()
    context = g.stack[g.context.index]

    if context.apt != null and context.apt.classID == "aptclientLib" then return context.apt

    if not context.computer then
        print(g.error("No computer object found."))
        return null
    end if

    libFile = g.func.findFile(context.computer.File("/"), "aptclient.so")

    if not libFile then
        print(g.error("Could not locate aptclient.so"))
        return null
    end if

    aptClient = include_lib(libFile.path)

    if aptClient.classID == "aptclientLib" then
        return aptClient
    else
        print(g.const.indent + g.error("Invalid library file.  The file loaded is not an aptclient library. (" + aptClient.classID + ")"))
        return null
    end if
end function

// Updates the apt repositories.
// @return {none}
g.func.updateApt = function
    context = g.stack[g.context.index]

    aptClient = context.apt

    while true
        response = aptClient.update

        if response == "" then
            break
        else
            repos = g.func.getRepos

            for repo in repos
                aptClient.del_repo(repo)
            end for

            ip = g.func.getHackshop
            
            aptClient.add_repo(ip)
        end if
    end while
end function

// Updates the metaxploit and crypto libraries. Also adds a hackshop repository if none are found.
// @return {none}
g.func.updateLibs = function
    installLib = function(libName, isUpgrade = 0)
        aptClient = outer.aptClient
        aptClient.install(libName, context.path)
        metaxFile = context.computer.File(context.path + "/metaxploit.so")
        if metaxFile then
            metax = include_lib(context.path + "/metaxploit.so")
            lib = metax.load(context.path + "/" + libName)

            if isUpgrade then
                outer.output = outer.output + g.const.indent + g.g1("Updated " + libName + " to version " + lib.version) + g.const.nl
            else
                outer.output = outer.output + g.const.indent + g.g1("Installed " + libName + " at version " + lib.version) + g.const.nl
            end if
        else
            if isUpgrade then
                outer.output = outer.output + g.const.indent + g.g1("Updated " + libName) + g.const.nl
            else
                outer.output = outer.output + g.const.indent + g.g1("Installed " + libName) + g.const.nl
            end if
        end if
    end function

    checkRepos = function
        hasMetax = 0
        hasCrypto = 0

        results = aptClient.search("metaxploit.so").split(char(10) + char(10))

        for result in results
            if result.split(char(10))[0] == "<b>metaxploit.so</b>" then
                hasMetax = 1
                break
            end if
        end for

        results = aptClient.search("crypto.so").split(char(10) + char(10))

        for result in results
            if result.split(char(10))[0] == "<b>crypto.so</b>" then
                hasCrypto = 1
                break
            end if
        end for

        return hasMetax and hasCrypto
    end function

    context = g.stack[g.context.index]

    if not context.computer then
        return g.error("No computer object found.")
    end if

    aptClient = context.apt

    repos = g.func.getRepos

    if repos == null then
        return g.error("Could not update repositories.")
    end if

    output = ""

    if repos.len == 0 then
        ip = g.func.getHackshop

        output = output + g.const.indent + g.y1("No repositories found. Adding " + ip + "...") + g.const.nl

        aptClient.add_repo(ip)
        aptClient.update
    end if

    while not checkRepos
        ip = g.func.getHackshop

        output = output + g.const.indent + g.y1("Current repositories are missing either crypto.so or metaxploit.so.  Adding " + ip + "...") + g.const.nl

        aptClient.add_repo(ip)
        aptClient.update
    end while
    
    metax = context.computer.File(context.path + "/metaxploit.so")

    if not metax then
        output = output + g.const.indent + g.l2("Installing metaxploit.so...") + g.const.nl
        installLib("metaxploit.so")
    else
        metaxploit = include_lib(context.path + "/metaxploit.so")
        lib = metaxploit.load(context.path + "/metaxploit.so")

        output = output + g.const.indent + g.l2("Found metaxploit.so at version " + lib.version) + g.const.nl

        updateMetax = aptClient.check_upgrade(metax.path)
        if updateMetax isa string then print(g.const.indent + g.error(updateMetax))

        if updateMetax == 1 then
            output = output + g.const.indent + g.y1("Update available for metaxploit.so...") + g.const.nl
            installLib("metaxploit.so", 1)
        end if
    end if

    crypto = context.computer.File(context.path + "/crypto.so")

    if not crypto then
        output = output + g.const.indent + g.l2("Installing crypto.so...") + g.const.nl
        installLib("crypto.so")
    else
        metaxploit = include_lib(context.path + "/metaxploit.so")
        lib = metaxploit.load(context.path + "/crypto.so")

        output = output + g.const.indent + g.l2("Found crypto.so at version " + lib.version) + g.const.nl

        updateCrypto = aptClient.check_upgrade(crypto.path)
        if updateCrypto isa string then print(g.const.indent + g.error(updateCrypto))

        if updateCrypto == 1 then
            output = output + g.const.indent + g.y1("Update available for crypto.so...") + g.const.nl
            installLib("crypto.so", 1)
        end if
    end if

    return output
end function

// Checks random IP addresses for an open port 1542 and then returns that IP address as a string.
// @return {string} - The IP address of the hackshop.
g.func.getHackshop = function
    ip = null
    hackshop = 0

    while not hackshop
        ip = g.func.getRandomIp

        if not is_lan_ip(ip) then
            router = g.func.getRouter(ip)

            if not router then continue

            ports = router.used_ports

            for port in ports
                if port.port_number == 1542 and not port.is_closed then
                    hackshop = 1
                    return router.public_ip
                end if
            end for
        end if
    end while
end function

// Sets some initial values for **HEX**.
// @return {none}
g.func.init = function
    g.context.index = "0" // Must be a string

    context = get_shell.createContext("home")

    g.homePath = context.path

    g.stack[g.context.index] = context

    g.stack[g.context.index].apt = g.func.getApt
end function

// Loads the necessary libraries for the current context.
// @return {none}
g.func.loadLibs = function
    g.stack[g.context.index].apt = g.func.getApt
    g.stack[g.context.index].metax = include_lib(g.stack[g.context.index].path + "/metaxploit.so")
    g.stack[g.context.index].crypto = include_lib(g.stack[g.context.index].path + "/crypto.so")
end function

// Loads the remote shell library for the current context.
// @return {none}
g.func.rshellLib = function
    if not g.stack[g.context.index].computer then
        print(g.error("No computer in the current context."))
        return
    end if

    libFile = g.func.findFile(g.stack[g.context.index].computer.File("/"), "librshell.so")

    if not libFile then
        print(g.error("Could not locate librshell.so"))
        return
    end if

    lib = include_lib(libFile.path)

    if not lib then
        print(g.error("Could not load librshell.so"))
        return
    end if

    g.stack[g.context.index].rshell = lib
end function

// Loads the library at the specified path and returns it via get_custom_object
// @param {string} path - The path to the library.
// @return {library} - The loaded library.
g.func.include_lib = function(path)
    src = "g = get_custom_object" + char(10) + "g.lib = include_lib(""" + @path + """)"
    g.func.run(src)
    if not g.hasIndex("lib") then return null

    lib = g.lib
    g.remove("lib")
    return lib
end function

// Creates necessary folders for the current context.
// @return {file|null} - The created folder or null if an error occurred.
g.func.createFolders = function
    home = g.stack["0"]
    context = g.stack[g.context.index]

    // Create targets folder
    p = g.homePath + "/targets"

    file = home.computer.File(p)

    if not file then
        result = home.computer.create_folder(g.homePath, "targets")

        if typeof(result) == "string" then
            print g.error(result)
            return null
        end if
    end if

    // Create public ip folder
    p = p + "/" + context.public

    file = home.computer.File(p)

    if not file then
        result = home.computer.create_folder(g.homePath + "/targets", context.public)

        if typeof(result) == "string" then
            print g.error(result)
            return null
        end if
    end if

    // Create local ip folder
    p = p + "/" + context.local

    file = home.computer.File(p)

    if not file then
        result = home.computer.create_folder(g.homePath + "/targets/" + context.public, context.local)

        if typeof(result) == "string" then
            print g.error(result)
            return null
        end if

        file = home.computer.File(p)
    end if

    return file
end function

// Retrieves the router object for the given IP address.
// @param {string|null} ip - The IP address to get the router for, or null to get the current router.
// @return {router|null} - The router object or null if not found.
g.func.getRouter = function(ip = null)
    context = g.stack[g.context.index]

    if context.type != "shell" then
        print g.error("Current context is not a shell.")
        return
    end if

    if typeof(@ip) == "string" and is_valid_ip(ip) then
        src = "g = get_custom_object" + char(10) + "g.temp = get_router(""" + ip + """)"
    else if @ip == null then
        src = "g = get_custom_object" + char(10) + "g.temp = get_router"
    else
        print g.error("Invalid parameter: " + typeof(ip) + ": " + ip)
        return
    end if

    g.func.run(src)

    if not g.hasIndex("temp") then
        print g.error("Something went wrong!!")
        return
    else
        router = g.temp
        g.remove("temp")
        return router
    end if
end function

// Retrieves the switch object for the given IP address.
// @param {string} ip - The IP address to get the switch for.
// @return {switch|null} - The switch object or null if not found.
g.func.getSwitch = function(ip)
    context = g.stack[g.context.index]

    if context.type != "shell" then
        print g.error("Current context is not a shell.")
        return
    end if

    if typeof(@ip) != "string" or not is_valid_ip(ip) then
        print g.error("Invalid parameter: " + typeof(@ip) + ": " + ip)
        return
    end if

    src = "g = get_custom_object" + char(10) + "g.temp = get_switch(""" + ip + """)"

    g.func.run(src)

    if not g.hasIndex("temp") then
        print g.error("Something went wrong!!")
        return
    else
        switch = g.temp
        g.remove("temp")
        return switch
    end if
end function

// Retrieves the shell object for the given user and password.
// @param {string} user - The username.
// @param {string} password - The password.
// @return {shell|null} - The shell object or null if not found.
g.func.getShell = function(user, password)
    context = g.stack[g.context.index]

    if context.type != "shell" then
        print g.error("Current context is not a shell.")
        return
    end if

    if typeof(@user) == "string" and typeof(@password) == "string" then
        src = "g = get_custom_object" + char(10) + "g.temp = get_shell(""" + user + """, """ + password + """)"
    else
        src = "g = get_custom_object" + char(10) + "g.temp = get_shell"
    end if

    g.func.run(src)

    if not g.hasIndex("temp") then
        print g.error("Something went wrong!!")
        return
    else if typeof(g.temp) == "string" then
        print g.error(g.temp)
        g.remove("temp")
        return
    else if typeof(g.temp) == "shell" then
        shell = g.temp
        g.remove("temp")
        return shell
    else
        print g.error("Something has gone wrong!!")
        print g.error("typeof(g.temp): " + typeof(g.temp))
        g.remove("temp")
        return
    end if
end function

// Runs the given source code in the current context.
// @param {string} src - The source code to run.
// @return {none}
g.func.run = function(src)
    if not g.func.checkShell(g.context.index) then return

    context = g.stack[g.context.index]

    if typeof(@src) != "string" then
        print g.error("Invalid parameter: " + typeof(@src))
        return
    end if

    prefix = context.path

    if prefix == "/" then prefix = ""

    file = context.computer.File(prefix + "/temp")

    if not file then
        result = context.computer.create_folder(context.path, "temp")
        if typeof(result) == "string" then print "1: " + g.error(result)
    end if
    
    file = context.computer.File(prefix + "/temp/1")

    if not file then
        result = context.computer.create_folder(prefix + "/temp", "1")
        if typeof(result) == "string" then print "2: " + g.error(result)
    end if
    
    file = context.computer.File(prefix + "/temp/hex.src")

    if not file then
        result = context.computer.touch(prefix + "/temp", "hex.src")
        if typeof(result) == "string" then print "3: " + g.error(result)

        file = context.computer.File(prefix + "/temp/hex.src")
    end if

    if not file then
        print g.error("Failed to create hex.src")
        return
    end if

    result = file.set_content(src)
    if typeof(result) == "string" then print "4: " + g.error(result)

    context.shell.build(file.path, prefix + "/temp")
    context.shell.launch(prefix + "/temp/hex")

    dir = context.computer.File(prefix + "/temp")
    if not dir then
        print g.error("Could not locate directory at: " + prefix + "/temp")
        return
    end if
    dir.move(prefix + "/temp/1", dir.name)
end function

// Transfers a file from the current context to the home context.
// @param {string} srcPath - The source file path.
// @param {string} destPath - The destination file path.
// @return {none}
g.func.get = function(srcPath, destPath)
    home = g.stack["0"]
    context = g.stack[g.context.index]

    if context.type != "shell" then
        print g.error("Context is not a shell.")
        return
    end if

    g.func.transfer(context.shell, srcPath, home.shell, destPath)
end function

// Transfers a file from the home context to the current context.
// @param {string} srcPath - The source file path.
// @param {string} destPath - The destination file path.
// @return {none}
g.func.put = function(srcPath, destPath)
    home = g.stack["0"]
    context = g.stack[g.context.index]

    if context.type != "shell" then
        print g.error("Context is not a shell.")
        return
    end if

    g.func.transfer(home.shell, srcPath, context.shell, destPath)
end function

// Transfers a file between two shells.
// @param {shell} srcShell - The source shell.
// @param {string} srcPath - The source file path.
// @param {shell} destShell - The destination shell.
// @param {string} destPath - The destination file path.
// @return {none}
g.func.transfer = function(srcShell, srcPath, destShell, destPath)
    if typeof(@srcShell) != "shell" or typeof(@srcPath) != "string" or typeof(@destShell) != "shell" or typeof(@destPath) != "string" then
        print g.error("Invalid parameter(s).")
        return
    end if

    srcFile = srcShell.host_computer.File(srcPath)

    if not srcFile then
        print g.error("Invalid srcPath parameter.")
        return
    end if

    if not srcFile.has_permission("r") then
        print g.error("Cannot read source file.")
        return
    end if

    destFolder = destShell.host_computer.File(destPath)

    if not destFolder then
        print g.error("Invalid destPath parameter.")
        return
    end if

    if not destFolder.has_permission("w") then
        print g.error("Cannot write to the destination path.")
        return
    end if

    result = srcShell.scp(srcFile.path, destFolder.path, destShell)

    if typeof(result) == "string" then
        print g.error(result)
    else if result == null then
        print g.error("An unknown error occurred.")
    end if
end function

// Uploads a library to the current context.
// @param {string} dir - The directory containing the library.
// @param {string} libName - The name of the library.
// @param {string} dest - The destination path.
// @return {number} - 1 if successful, 0 otherwise.
g.func.putLib = function(dir, libName, dest = "/lib")
    home = g.stack["0"]
    context = g.stack[g.context.index]

    if context.type != "shell" then
        print g.error("Context is not a shell.")
        return 0
    end if

    if typeof(@libName) != "string" or typeof(@dir) != "string" or typeof(@dest) != "string" then
        print g.error("Invalid arguments.")
        return 0
    end if

    searchName = libName.replace("\.so", "")

    searchFolder = home.computer.File(dir)

    libs = g.func.find(searchFolder, searchName + "*.so", "br")

    if libs.len == 0 then
        print g.error("Could not find " + libName + " in " + dir)
        return 0
    end if

    file = libs[0]

    g.func.put(file.path, dest)

    filePath = (dest + "/" + file.name).replace("//", "/")

    file = context.computer.File(filePath)

    if not file then
        print g.error("Could not find file at dest")
        return 0
    end if

    result = file.move(dest, libName)

    if result == 1 then return 1

    if typeof(result) == "string" then
        print g.error(result)
    else
        print g.error("Failed to rename file")
    end if

    return 0
end function

// Checks if the context at the given index is a shell.
// @param {string} idx - The index to check.
// @return {number} - 1 if the context is a shell, 0 otherwise.
g.func.checkShell = function(idx)
    if not typeof(@idx) == "string" then
        print g.error("Invalid index type: " + typeof(@idx))
        return 0
    end if

    if not g.stack.hasIndex(idx) then
        print g.error("Stack does not contain index: " + @idx)
        return 0
    end if

    if g.stack[idx].type != "shell" then
        print g.error("Context is not a shell.")
        return 0
    end if

    return 1
end function

g.func.checkProxy = function(silent = 0)
    if not g.hasIndex("proxy") then
        if not silent then print g.error("No proxy found.")
        return 0
    end if

    if typeof(g.proxy) != "string" or typeof(g.proxy.to_int) != "number" or not g.stack.hasIndex(g.proxy) then
        if not silent then print g.error("Invalid proxy: " + @g.proxy)
        return 0
    end if

    if g.stack[g.proxy].type != "shell" then 
        if not silent then print g.error("Proxy context is not a shell.")
        return 0
    end if

    return 1
end function

g.func.checkPort = function(port)
    port = @port

    if typeof(port) == "string" then
        if not typeof(port.to_int) == "number" then
            print g.error("Invalid port: " + @port)
            return 0
        end if

        port = port.to_int
    end if

    if typeof(port) != "number" or port < 0 or port > 65535 then
        print g.error("Invalid port: " + @port)
        return 0
    end if

    return 1
end function

// Checks if the context at the given index is a computer.
// @param {string} idx - The index to check.
// @return {number} - 1 if the context is a computer, 0 otherwise.
g.func.checkComputer = function(idx)
    if not typeof(@idx) == "string" then
        print g.error("Invalid index type: " + typeof(@idx))
        return 0
    end if

    if not g.stack.hasIndex(idx) then
        print g.error("Stack does not contain index: " + @idx)
        return 0
    end if

    if g.stack[idx].type != "computer" then
        print g.error("Context is not a computer.")
        return 0
    end if

    return 1
end function

// Checks if the context at the given index is a file.
// @param {string} idx - The index to check.
// @return {number} - 1 if the context is a file, 0 otherwise.
g.func.checkFile = function(idx)
    if not typeof(@idx) == "string" then
        print g.error("Invalid index type: " + typeof(@idx))
        return 0
    end if

    if not g.stack.hasIndex(idx) then
        print g.error("Stack does not contain index: " + @idx)
        return 0
    end if

    if g.stack[idx].type != "file" then
        print g.error("Context is not a file.")
        return 0
    end if

    return 1
end function

// Attaches the metaxploit library to the context at the given index.
// @param {string} idx - The index of the context.
// @return {number} - 1 if successful, 0 otherwise.
g.func.attach_metax = function(idx)
    if not g.func.checkShell(idx) then return 0

    if not g.func.putLib(g.stack["0"].path, "metaxploit.so", g.stack[idx].path) then
        print g.error("Could not upload metaxploit.so.")
    end if

    print g.const.indent + g.s3("Attaching metaxploit lib to context...")
    filePath = g.stack[idx].path + "/metaxploit.so"
    metax = g.func.include_lib(filePath.replace("//", "/"))

    if not metax then
        print g.error("Could not retrieve library via include_lib")
        return 0
    end if

    g.stack[idx].metax = metax

    return 1
end function

// Attaches the crypto library to the context at the given index.
// @param {string} idx - The index of the context.
// @return {number} - 1 if successful, 0 otherwise.
g.func.attach_crypto = function(idx)
    if not g.func.checkShell(idx) then return 0

    if not g.func.putLib(g.stack["0"].path, "crypto.so", g.stack[idx].path) then
        print g.error("Could not upload crypto.so.")
    end if

    print g.const.indent + g.s3("Attaching crypto lib to context...")
    filePath = g.stack[idx].path + "/crypto.so"
    crypto = g.func.include_lib(filePath.replace("//", "/"))

    if not crypto then
        print g.error("Could not retrieve library via include_lib")
        return 0
    end if

    g.stack[idx].crypto = crypto

    return 1
end function

// Attaches the aptclient library to the context at the given index.
// @param {string} idx - The index of the context.
// @return {number} - 1 if successful, 0 otherwise.
g.func.attach_apt = function(idx)
    if not g.func.checkShell(idx) then return 0

    if not g.func.putLib(g.stack["0"].path, "aptclient.so", g.stack[idx].path) then
        print g.error("Could not upload aptclient.so.")
    end if

    print g.const.indent + g.s3("Attaching aptclient lib to context...")
    filePath = g.stack[idx].path + "/aptclient.so"
    aptclient = g.func.include_lib(filePath.replace("//", "/"))

    if not aptclient then
        print g.error("Could not retrieve library via include_lib")
        return 0
    end if

    g.stack[idx].apt = aptclient

    return 1
end function