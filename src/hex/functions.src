// Retrieves the user based on file permissions.
// @param {file} file - The file to check permissions on.
// @param {number} color - Whether to return the username in color (1) or not (0).
// @return {string} - The username.
g.func.getUser = function(file, color = 0)
    while file.path != "/"
        file = file.parent
    end while

    if file.has_permission("w") then
        if color then return g.r1("root") else return "root"
    end if

    for folder in file.get_folders
        if folder.name == "home" then
            for userDir in folder.get_folders
                if userDir.has_permission("w") and userDir.name != "guest" then
                    if color then return g.b2(userDir.name) else return userDir.name
                end if
            end for
        end if
    end for

    if color then return g.l3("guest") else return "guest"
end function

// Recursively finds a folder by path.
// @param {folder} folder - The starting folder.
// @param {string} path - The path to search for.
// @return {folder|null} - The found folder or null if not found.
g.func.findFolder = function(folder, path)
    if folder.path == path or folder.name == path then return folder

    for subFolder in folder.get_folders
        result = g.func.findFolder(subFolder, path)

        if result then return result
    end for

    return null
end function

// Recursively finds a file by name.
// @param {file} file - The starting file or folder.
// @param {string} name - The name of the file to search for.
// @return {file|null} - The found file or null if not found.
g.func.findFile = function(file, name)
    if file.name == name and not file.is_folder then return file

    files = file.get_files + file.get_folders

    for temp in files
        if temp.name == name and not temp.is_folder then return temp

        if temp.is_folder then
            result = g.func.findFile(temp, name)

            if result then return result
        end if
    end for

    return null
end function

// Generates a random valid IP address that is not a LAN IP.
// @return {string} - The generated IP address.
g.func.getRandomIp = function
    ip = ""

    while not is_valid_ip(ip) or is_lan_ip(ip)
        min = 0
        max = 255
        first = floor(rnd * (max - min + 1) + min)
        second = floor(rnd * (max - min + 1) + min)
        third = floor(rnd * (max - min + 1) + min)
        fourth = floor(rnd * (max - min + 1) + min)

        ip = first + "." + second + "." + third + "." + fourth
    end while

    return ip
end function

// Creates a heading string centered within two lines of ='s.
// @param {string} str - The string to center.
// @return {string} - The formatted heading.
g.func.heading = function(str)
    pos = (g.const.ll - str.len) / 2

    heading = g.const.indent + g.const.llb + g.const.ni
    heading = heading + g.b3(" "*pos + "<size=20>" + str + "</size>") + g.const.ni
    heading = heading + g.const.llb + g.const.nl

    return heading
end function

// Retrieves repository addresses from sources.txt.
// @return {list<string>} - A list of repository addresses.
g.func.getRepos = function()
    sources = get_shell.host_computer.File("/etc/apt/sources.txt")

    if not sources then
        print(g.error("Could not locate sources.txt"))
        return null
    end if

    matches = sources.get_content.matches(g.const.ipPattern)

    addresses = []

    for index in matches.indexes
        addresses.push(matches[index])
    end for

    return addresses
end function

// Retrieves the apt client library.
// @return {aptclientLib|null} - The apt client object or null if not found.
g.func.getApt = function()
    libFile = g.func.findFile(get_shell.host_computer.File("/"), "aptclient.so")

    if not libFile then
        print(g.error("Could not locate aptclient.so"))
        return null
    end if

    aptClient = include_lib(libFile.path)

    if aptClient.classID == "aptclientLib" then
        return aptClient
    else
        print(g.const.indent + g.error("Invalid library file.  The file loaded is not an aptclient library. (" + aptClient.classID + ")"))
        return null
    end if
end function

// Updates the apt repositories.
// @return {none}
g.func.updateApt = function
    aptClient = g.func.getApt()

    while true
        response = aptClient.update

        if response == "" then
            break
        else
            repos = g.func.getRepos

            for repo in repos
                aptClient.del_repo(repo)
            end for

            ip = g.func.getHackshop
            
            aptClient.add_repo(ip)
        end if
    end while
end function

// Updates the metaxploit and crypto libraries. Also adds a hackshop repository if none are found.
// @return {none}
g.func.updateLibs = function
    installLib = function(libName, isUpgrade = 0)
        aptClient = outer.aptClient
        aptClient.install(libName, current_path)
        metax = include_lib(current_path + "/metaxploit.so")
        lib = metax.load(current_path + "/" + libName)

        if isUpgrade then
            outer.output = outer.output + g.const.indent + g.g1("Updated " + libName + " to version " + lib.version) + g.const.nl
        else
            outer.output = outer.output + g.const.indent + g.g1("Installed " + libName + " at version " + lib.version) + g.const.nl
        end if
    end function

    aptClient = g.func.getApt()

    repos = g.func.getRepos

    output = ""

    if repos.len == 0 then
        ip = g.func.getHackshop

        output = output + g.const.indent + g.y1("No repositories found. Adding " + ip + "...") + g.const.nl

        aptClient.add_repo(ip)
        aptClient.update
    end if
    
    metax = get_shell.host_computer.File(current_path + "/metaxploit.so")

    if not metax then
        output = output + g.const.indent + g.l2("Installing metaxploit.so...") + g.const.nl
        installLib("metaxploit.so")
    else
        metaxploit = include_lib(current_path + "/metaxploit.so")
        lib = metaxploit.load(current_path + "/metaxploit.so")

        output = output + g.const.indent + g.l2("Found metaxploit.so at version " + lib.version) + g.const.nl

        updateMetax = aptClient.check_upgrade(metax.path)
        if updateMetax isa string then print(g.const.indent + g.error(updateMetax))

        if updateMetax == 1 then
            output = output + g.const.indent + g.y1("Update available for metaxploit.so...") + g.const.nl
            installLib("metaxploit.so", 1)
        end if
    end if

    crypto = get_shell.host_computer.File(current_path + "/crypto.so")

    if not crypto then
        output = output + g.const.indent + g.l2("Installing crypto.so...") + g.const.nl
        installLib("crypto.so")
    else
        metaxploit = include_lib(current_path + "/metaxploit.so")
        lib = metaxploit.load(current_path + "/crypto.so")

        output = output + g.const.indent + g.l2("Found crypto.so at version " + lib.version) + g.const.nl

        updateCrypto = aptClient.check_upgrade(crypto.path)
        if updateCrypto isa string then print(g.const.indent + g.error(updateCrypto))

        if updateCrypto == 1 then
            output = output + g.const.indent + g.y1("Update available for crypto.so...") + g.const.nl
            installLib("crypto.so", 1)
        end if
    end if

    return output
end function

// Checks random IP addresses for an open port 1542 and then returns that IP address as a string.
// @return {string} - The IP address of the hackshop.
g.func.getHackshop = function
    ip = null
    hackshop = 0

    while not hackshop
        ip = g.func.getRandomIp

        if not is_lan_ip(ip) then
            router = get_router(ip)

            if not router then continue

            ports = router.used_ports

            for port in ports
                if port.port_number == 1542 and not port.is_closed then
                    hackshop = 1
                    return router.public_ip
                end if
            end for
        end if
    end while
end function

// Sets some initial values for **HEX**.
// @return {none}
g.func.init = function()
    g.metax = include_lib(current_path + "/metaxploit.so")
    g.crypto = include_lib(current_path + "/crypto.so")

    g.context.index = "0" // Must be a string

    context = get_shell.createContext
    
    context.path = current_path
    context.metax = include_lib(current_path + "/metaxploit.so")
    context.crypto = include_lib(current_path + "/crypto.so")

    g.stack[g.context.index] = context
end function