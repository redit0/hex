if not g.hasIndex("f") then g.f = {}
if not g.hasIndex("target") then g.target = {}

format = function(str, args = null)
    if args then
        for x in range(args.len-1)
            str = "<" + args[x] + ">" + str + "</" + args[x] + ">"
        end for
    end if
    return str
end function

//colors
green = function(str, args = null)
    return format("<color=" + g.c.green + ">" + str + "</color>", args)
    end function

string.green = function(args = null)
    return format("<color=" + g.c.green + ">" + self + "</color>", args)
    end function

darkgreen = function(str, args = null)
    return format("<color=" + g.c.darkgreen + ">" + str + "</color>", args)
    end function

string.darkgreen = function(args = null)
    return format("<color=" + g.c.darkgreen + ">" + self + "</color>", args)
    end function

cyan = function(str, args = null)
    return format("<color=" + g.c.cyan + ">" + str + "</color>", args)
    end function

string.cyan = function(args = null)
    return format("<color=" + g.c.cyan + ">" + self + "</color>", args)
    end function

blue = function(str, args = null)
    return format("<color=" + g.c.blue + ">" + str + "</color>", args)
    end function

string.blue = function(args = null)
    return format("<color=" + g.c.blue + ">" + self + "</color>", args)
    end function

yellow = function(str, args = null)
    return format("<color=" + g.c.yellow + ">" + str + "</color>", args)
    end function

string.yellow = function(args = null)
    return format("<color=" + g.c.yellow + ">" + self + "</color>", args)
    end function

darkyellow = function(str, args = null)
    return format("<color=" + g.c.darkyellow + ">" + str + "</color>", args)
    end function

string.darkyellow = function(args = null)
    return format("<color=" + g.c.darkyellow + ">" + self + "</color>", args)
    end function

orange = function(str, args = null)
    return format("<color=" + g.c.orange + ">" + str + "</color>", args)
    end function

string.orange = function(args = null)
    return format("<color=" + g.c.orange + ">" + self + "</color>", args)
    end function

magenta = function(str, args = null)
    return format("<color=" + g.c.magenta + ">" + str + "</color>", args)
    end function

string.magenta = function(args = null)
    return format("<color=" + g.c.magenta + ">" + self + "</color>", args)
    end function

red = function(str, args = null)
    return format("<color=" + g.c.red + ">" + str + "</color>", args)
    end function

string.red = function(args = null)
    return format("<color=" + g.c.red + ">" + self + "</color>", args)
    end function

white = function(str, args = null)
    return format("<color=" + g.c.white + ">" + str + "</color>", args)
    end function

string.white = function(args = null)
    return format("<color=" + g.c.white + ">" + self + "</color>", args)
    end function

lightgray = function(str, args = null)
    return format("<color=" + g.c.lightgray + ">" + str + "</color>", args)
    end function

string.lightgray = function(args = null)
    return format("<color=" + g.c.lightgray + ">" + self + "</color>", args)
    end function


g.f.user = function(obj)
    if typeof(obj) == "shell" then
        comp = obj.host_computer
    else if typeof(obj) == "computer" then
        comp = obj
    else
        return red("[Error] Incorrect Object Type", "b")
    end if

    if comp.File("/root").has_permission("w") then
        return "root"
    end if

    for user in comp.File("/home").get_folders
        uName = user.name

        if comp.File("/home/" + uName).has_permission("w") then
            return uName
        end if
    end for

    return "guest"
end function

g.f.shellMap = function(shell)
    map = {}

    map.shell = shell
    map.user = g.f.user(shell)
    map.pip = shell.host_computer.public_ip
    map.lip = shell.host_computer.local_ip
    map.skey = map.pip + ":" + map.lip + ":"

    if map.user == "root" then
        map.skey = map.skey + "!!!"
    else if map.user == "guest" then
        map.skey = map.skey + map.user
    else
        map.skey = map.skey + "zzz"
    end if

    return map
end function

g.target.print = function()
    if not g.target.hasIndex("ip") or not is_valid_ip(g.target.ip) then
        print(g.c.indent + "There is currently no saved " + g.c.targettext + ".")
        return
    end if

    if not g.target.hasIndex("port") or typeof(g.target.port) != "number" or g.target.port < 0 or g.target.port > 65535 then g.target.port = 0

    t = g.c.indent + "The current " + g.c.targettext + " is: " + g.target.ip + ":" + g.target.port

    print(t.green)
end function

g.f.init = function()
    g.shells = []
    g.shells.push(g.f.shellMap(get_shell))

    g.current = {}
    g.current.context = "home"
    g.current.obj = g.shells[0].shell
    g.current.comp = g.current.obj.host_computer
    g.current.hostname = g.current.comp.get_name
    g.current.pip = g.current.comp.public_ip
    g.current.lip = g.current.comp.local_ip
    g.current.user = g.shells[0].user
    g.current.dir = current_path
end function