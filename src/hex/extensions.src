// Retrieves the user based on file permissions for different object types.
// @param {number} color - Whether to return the username in color (1) or not (0).
// @return {string} - The username.
map.getUser = function(color = 0)
    type = typeof(self)

    if type == "shell" then
        return g.func.getUser(self.host_computer.File("/"), color)
    end if

    if type == "computer" then
        return g.func.getUser(self.File("/"), color)
    end if

    if type == "file" then
        return g.func.getUser(self, color)
    end if

    if self isa g.Target then
        return g.func.getUser(self.file, color)
    end if

    print(g.error("Invalid object type: " + type + g.const.ni))

    return g.r1("null")
end function

// Retrieves the guest folder in a system from a file object.
// @return {folder|null} - The guest folder or null if not found.
map.getGuestFolder = function
    if typeof(self) != "file" then
        print(g.error("Invalid type: " + typeof(self)))
        return null
    end if

    file = self.getRootFolder

    for folder in file.get_folders
        if folder.name == "home" then
            for userFolder in folder.get_folders
                if userFolder.name == "guest" then return userFolder
            end for
            return null
        end if
    end for
end function

// Retrieves the root folder for a file object.
// @return {folder} - The root folder.
map.getRootFolder = function
    if typeof(self) != "file" then
        print(g.error("Invalid type: " + typeof(self)))
        return null
    end if

    file = self

    while file.path != "/"
        file = file.parent
    end while
    
    return file
end function

// Retrieves a folder by path for a file object.
// @param {string} path - The path to search for.
// @return {folder|null} - The found folder or null if not found.
map.getFolder = function(path)
    if typeof(self) != "file" then
        print(g.error("Invalid type: " + typeof(self)))
        return null
    end if

    file = self.getRootFolder

    return g.func.findFolder(file, path)
end function

// Retrieves the hostname for different object types.
// @param {number} color - Whether to return the hostname in color (1) or not (0).
// @return {string} - The hostname.
map.getHostname = function(color = 0)
    type = typeof(self)

    if type == "shell" then
        if color then return g.l1(self.host_computer.get_name) else return self.host_computer.get_name
    end if

    if type == "computer" then
        if color then return g.l1(self.get_name) else return self.get_name
    end if

    if self isa g.Target then
        if color then return g.l1(self.comp.get_name) else return self.comp.get_name
    end if

    if color then return g.l2("unknown") else return "unknown"
end function

// Retrieves the local IP address for different object types.
// @param {number} color - Whether to return the IP address in color (1) or not (0).
// @return {string} - The local IP address.
map.getLocal = function(color = 0)
    type = typeof(self)

    address = "unknown"

    if type == "shell" then
        address = self.host_computer.local_ip
    end if

    if type == "computer" then
        address = self.local_ip
    end if

    if self isa g.Target then
        address = self.comp.local_ip
    end if

    if color then return g.b3(address) else return address
end function

// Retrieves the public IP address for different object types.
// @param {number} color - Whether to return the IP address in color (1) or not (0).
// @return {string} - The public IP address.
map.getPublic = function(color = 0)
    type = typeof(self)

    address = "unknown"

    if type == "shell" then
        address = self.host_computer.public_ip
    end if

    if type == "computer" then
        address = self.public_ip
    end if

    if self isa g.Target then
        address = self.comp.public_ip
    end if

    if color then return g.b3(address) else return address
end function

// Retrieves the type of the object (shell, computer, file).
// @param {number} color - Whether to return the type in color (1) or not (0).
// @return {string} - The type of the object.
map.getType = function(color = 0)
    type = typeof(self)

    if type == "shell" or (self isa g.Target and self.shell != null) then
        if type == "shell" then
            procs = self.host_computer.show_procs.split(char(10))
        else
            procs = self.comp.show_procs.split(char(10))
        end if

        for proc in procs
            name = proc.split(" ")[4]

            if name == "Xorg" then
                if color then return g.g2("home") else return "home"
            end if
        end for

        if color then return g.s3(type) else return type
    end if

    if type == "computer" or (self isa g.Target and self.comp != null) then
        if color then return g.b1("computer") else return "computer"
    end if

    if type == "file" or (self isa g.Target and self.file != null) then
        if color then return g.l1("file") else return "file"
    end if

    print(g.error("Invalid object type: " + type + g.const.ni))

    return g.r1("null")
end function