map.getUser = function(color = 0)
    type = typeof(self)

    if type == "shell" then
        return g.func.getUser(self.host_computer.File("/"), color)
    end if

    if type == "computer" then
        return g.func.getUser(self.File("/"), color)
    end if

    if type == "file" then
        return g.func.getUser(self, color)
    end if

    print(g.error(g.const.indent + "Invalid object type: " + type + g.const.ni))

    return g.r1("null")
end function

map.getHostname = function(color = 0)
    type = typeof(self)

    if type == "shell" then
        if color then return g.l1(self.host_computer.get_name) else return self.host_computer.get_name
    end if

    if type == "computer" then
        if color then return g.l1(self.get_name) else return self.get_name
    end if

    if color then return g.l2("unknown") else return "unknown"
end function

map.getLocal = function(color = 0)
    type = typeof(self)

    address = "unknown"

    if type == "shell" then
        address = self.host_computer.local_ip
    end if

    if type == "computer" then
        address = self.local_ip
    end if

    if color then return g.b3(address) else return address
end function

map.getPublic = function(color = 0)
    type = typeof(self)

    address = "unknown"

    if type == "shell" then
        address = self.host_computer.public_ip
    end if

    if type == "computer" then
        address = self.public_ip
    end if

    if color then return g.b3(address) else return address
end function

map.getType = function(color = 0)
    type = typeof(self)

    if type == "shell" then
        procs = self.host_computer.show_procs.split(char(10))

        for proc in procs
            name = proc.split(" ")[4]

            if name == "Xorg" then
                if color then return g.g2("home") else return "home"
            end if
        end for

        if color then return g.s3(type) else return type
    end if

    if type == "computer" then
        if color then return g.b1(type) else return type
    end if

    if type == "file" then
        if color then return g.l1(type) else return type
    end if

    print(g.error(g.const.indent + "Invalid object type: " + type + g.const.ni))

    return g.red("null")
end function