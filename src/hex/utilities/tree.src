treeHelp = function(self)
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" {path}") + g.l2(" Displays the file system contents in a tree view starting from the specified path, or the root if a path is not specified") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

string.formatPermissions = function
    if not self isa string then
        print(g.error("Invalid type: " + typeof(self)))
        return null
    end if

    if self == "d---------" or self == "----------" then
        return g.d1("[" + self + "]")
    else
        return g.s2("[" + self + "]")
    end if
end function

string.formatUsername = function
    if not self isa string then
        return self
    end if

    if self == "root" then return g.d1("[" + self + "]") else return g.s2("[" + self + "]")
end function

map.sortKey = function(self)
    if typeof(self) == "file" then
        return self.path.replace("[^a-zA-Z0-9]","")
    end if

    return ""
end function

map.getFileColor = function
    if typeof(self) != "file" then
        print(g.error("Invalid type: " + typeof(self)))
        return null
    end if

    names = ["Mail.txt","Bank.txt","Map.conf","sources.txt"]

    file = self

    if file.is_folder then return g.s2(file.name)

    if file.is_binary and not file.is_folder then
        if file.is_symlink then
            return g.d1(file.name)
        else if file.name[-3:] == ".so" then
            return g.l3(file.name)
        else
            return g.d1(file.name)
        end if
    end if

    if not file.is_binary then
        if file.name == "passwd" and file.path != "/bin/passwd" then
            if file.has_permission("r") then
                return g.g1(file.name)
            else
                return g.o1(file.name)
            end if
        else if names.indexOf(file.name) != null then
            if file.has_permission("r") then
                return g.g1(file.name)
            else
                return g.o1(file.name)
            end if
        else
            return g.b1(file.name)
        end if

    end if
end function

getTree = function(path)
    files = path.get_folders + path.get_files

    for file in files
        g.util.tree.data.files.push(file)

        if file.is_folder then getTree(file)
    end for
end function

tree = function(args = null)
    idx = g.context.index

    path = "/"

    if args != null and args.len > 0 then
        if args[0] == "help" or args[0] == "-h" or args.len > 1 then
            self.help
            return
        else if args[0] == "." then
            path = g.stack[idx].path
        else
            if not g.stack[idx].file then
                print g.error("Current context does not have a file object available")
                return
            end if
            tempFile = g.stack[idx].file.getFolder(args[0])

            if typeof(tempFile) == "file" then
                path = tempFile.path
            else
                print(g.error("Could not find folder at path: " + args[0] + g.const.ni + g.r1("Setting path to ""/"".")))
            end if
        end if
    end if

    start = g.stack[idx].file.getFolder(path)

    self.data.files = []

    getTree(start)

    startingLevel = path.matches("/").indexes.len

    if path != "/" then startingLevel = startingLevel + 1

    output = "<space=2.1em><size=120%>" + start.permissions.formatPermissions
    output = output + " " + start.owner.formatUsername + "<pos=350>" + start.group.formatUsername
    output = output + "<pos=494>.<space=2.2em>" + g.s2(start.path) + g.const.nl

    files = {}

    for temp in self.data.files
        files[temp.sortKey] = temp
    end for
    
    indices = files.indexes

    indices.sort

    for index in indices
        file = files[index]

        line = "<space=2.1em><size=120%>" + file.permissions.formatPermissions
        line = line + " " + file.owner.formatUsername + "<pos=350>" + file.group.formatUsername
        line = line + "<pos=500>"

        // Calculate the number of levels down we are from the starting path and add the indents
        levels = file.path.matches("/").indexes.len - startingLevel

        line = line + g.const.tt*levels

        // Write the file indicator and file name
        line = line + g.d1("<mark=#666666><mspace=0.1>" + char(160) + "</mspace></mark>" + char(160) + "<space=-0.6em><cspace=-0.1em>———</cspace> " + file.getFileColor)

        line = line + g.const.nl

        output = output + line
    end for

    print(output)
end function

// Fill out the parts of this template, and then place it in the a folder called 'tools' in the same directory as the main hex binary file.
// You can leave it as src code (name it with a .src file extension), otherwise hex will attempt to load it as a binary file that has been built with the
// 'allow import' flag set.

g.util.tree = {
    "name": "tree",         // Unformatted tool name text
    "text": g.s2("tree"),    // Tool name text with any formatting you want to use when its name is displayed
    "sortOrder": 500,       // This number will be used to sort this tool in the menu.  Quit is the last built-in item, with sort order 999.
    "exec": @tree,          // A function reference to the toolName function above.
    "help": @treeHelp,      // A function reference to the help function above.
    "data": {}              // This map can be used to store any data or additional functions used by the tool that might need to be accessed outside of the tool itself.
}