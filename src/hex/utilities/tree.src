treeHelp = function(self)
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" {path}") + g.l2(" Displays the file system contents in a tree view starting from the specified path, or the root if a path is not specified") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

tree = function(args = null)
    string.formatPermissions = function
        if not self isa string then
            print(g.error("Invalid type: " + typeof(self)))
            return null
        end if

        if self == "d---------" or self == "----------" then
            return g.l2("[" + self + "]")
        else
            return g.s2("[" + self + "]")
        end if
    end function

    string.formatUsername = function
        if not self isa string then
            return self
        end if

        if self == "root" then return g.l2("[" + self + "]") else return g.s2("[" + self + "]")
    end function

    map.sortKey = function(self)
        if typeof(self) == "file" then
            return self.path.replace("[^a-zA-Z0-9]","")
        end if

        return ""
    end function

    map.getFileColor = function
        if typeof(self) != "file" then
            print(g.error("Invalid type: " + typeof(self)))
            return null
        end if

        names = ["Mail.txt","Bank.txt","Map.conf","sources.txt"]

        file = self

        if file.is_folder then return g.s2(file.name)

        if file.is_binary and not file.is_folder then
            if file.name[-3:] == ".so" then
                return g.l3(file.name)
            else
                return g.l2(file.name)
            end if
        end if

        if not file.is_binary then
            if file.name == "passwd" and file.path != "/bin/passwd" then
                if file.has_permission("r") then
                    return g.g1(file.name)
                else
                    return g.o1(file.name)
                end if
            else if names.indexOf(file.name) != null then
                if file.has_permission("r") then
                    return g.g1(file.name)
                else
                    return g.o1(file.name)
                end if
            else
                return g.b1(file.name)
            end if

        end if
    end function

    count = {"dirs": 0,"files": 0}

    // Credit for the pipe and line endings in the following three lines goes to Macha and Virus
    // I borrowed this from the Unity source code available here: https://github.com/MachaCeleste/CelestialCorp-Unity/
    continuedLine = "<size=120%><mspace=0.1> <mark=#ffffff>"+char(1564)+"</mark></size><mspace=-0.1>"+char(1564)+"</mspace></mspace> "
    line = "<size=120%><mspace=0.1> <mark=#ffffff>"+char(1564)+"</mark></size><#fff><s></mspace>  </s></color><space=0.3em><size=100%>"
    endLine = "<size=70%><mspace=0.1> <voffset=8><mark=#ffffff>"+char(1564)*2+"</mark></size><voffset=0><#fff><s></mspace>  </s></color><space=0.3em><size=100%>"

    walk = function(directory, prefix)
        files = directory.get_folders + directory.get_files

        if files == [] then return

        temp = {}

        for file in files
            temp[file.name] = file
        end for

        indices = temp.indexes
        indices.sort

        files = []

        for index in indices
            files.push(temp[index])
        end for

        for index in range(0, files.len - 1)
            file = files[index]

            if index == files.len - 1 then
                parts = [endLine, "   "]
            else
                parts = [line, continuedLine + "  "]
            end if

            output = g.const.indent + "<size=120%>"
            output = output + file.permissions.formatPermissions + " "
            output = output + file.owner.formatUsername + "<pos=350>" + file.group.formatUsername + "<pos=500>"
            output = output + prefix + parts[0] + file.getFileColor

            print(output)

            if file.is_folder then
                count.dirs = count.dirs + 1
                walk(file, prefix + parts[1])
            else
                count.files = count.files + 1
            end if
        end for
    end function

    idx = g.context.index

    path = "/"

    if args != null and args.len > 0 then
        if args[0] == "help" or args[0] == "-h" or args.len > 1 then
            self.help
            return
        else if args[0] == "." then
            path = g.stack[idx].currentPath
        else
            if not g.stack[idx].file then
                print g.error("Current context does not have a file object available")
                return
            end if
            tempFile = g.stack[idx].file.getFolder(args[0])

            if typeof(tempFile) == "file" then
                path = tempFile.path
            else
                print(g.error("Could not find folder at path: " + args[0] + g.const.ni + g.r1("Setting path to ""/"".")))
            end if
        end if
    end if

    start = g.stack[idx].file.getFolder(path)

    output = g.const.indent + "<size=120%>"
    output = output + start.permissions.formatPermissions + " "
    output = output + start.owner.formatUsername + "<pos=350>" + start.group.formatUsername + "<pos=495>"
    output = output + ".  " + start.getFileColor

    print(output)    

    walk(start, "")

    if count.dirs == 1 then
        totals = "1 directory, "
    else
        totals = count.dirs + " directories, "
    end if
    
    if count.files == 1 then
        totals = totals + "1 file"
    else
        totals = totals + count.files + " files"
    end if
    
    print g.const.ni + "<size=120%>" + g.l2(totals)
end function

// Fill out the parts of this template, and then place it in the a folder called 'tools' in the same directory as the main hex binary file.
// You can leave it as src code (name it with a .src file extension), otherwise hex will attempt to load it as a binary file that has been built with the
// 'allow import' flag set.

g.util.tree = {
    "name": "tree",
    "shortDescription": "Displays the file system contents in a tree view.",
    "exec": @tree,
    "help": @treeHelp,
    "data": {}
}