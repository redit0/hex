swapHelp = function(self)
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" {index}") + g.l2(" Swaps the context with the one at the provided index (use 'stack' to view contexts and indexes).  If no index is specified, swaps with the previously selected context.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

doSwap = function(args = null)
    if args != null and args.len > 0 then
        if args[0] == "help" or args[0] == "-h" then
            self.help
            return
        else if args[0].to_int isa number and g.stack.hasIndex(args[0]) then
            g.stack.lastIndex = g.context.index
            g.context.index = args[0]
            return
        end if

        self.help
        return
    else if args == null or args == [] then
        if g.stack.hasIndex("lastIndex") then
            newIndex = g.stack.lastIndex
            g.stack.lastIndex = g.context.index
            g.context.index = newIndex
        end if
        return
    else
        self.help
        return
    end if
end function

// Fill out the parts of this template, and then place it in the a folder called 'tools' in the same directory as the main hex binary file.
// You can leave it as src code (name it with a .src file extension), otherwise hex will attempt to load it as a binary file that has been built with the
// 'allow import' flag set.

g.util.swap = {
    "name": "swap",
    "shortDescription": "Swaps the context with the one at the provided index.",
    "exec": @doSwap,
    "help": @swapHelp,
    "data": {}
}