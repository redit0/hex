stackHelp = function(self)
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.l2(" Prints a list of all contexts currently stored in the stack") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-c/clear]") + g.l2(" Clears all items from the stack except for the home computer context (whichever computer originally ran hex)") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

doStack = function(args = null)
    if args != null and args.len > 0 then
        if args[0] == "help" or args[0] == "-h" then
            self.help
            return
        else if args[0] == "clear" or args[0] == "-c" then
            g.stack.clear
            g.command = "stack"
            return
        else
            self.help
            return
        end if
    end if

    keys = g.stack.indexes

    items = {}

    for i in keys
        if not i.to_int isa number then continue

        context = g.stack[i]
        context.key = i

        if not items.hasIndex(context.public) then items[context.public] = []

        items[context.public].push(context)
    end for

    indices = items.indexes
    indices.sort

    for i in indices
        items[i].sort("local")
    end for

    output = g.const.nl + g.const.indent + g.s3("<size=115%><voffset=0.5em>Index<pos=150>Public IP<pos=350>Local IP<pos=550>Type<pos=700>User</voffset></size>") + g.const.nl

    context = g.stack[g.context.index]

    for i in indices
        for item in items[i]
            line = g.const.indent

            if item.public == context.public and item.local == context.local and item.type == context.type then
                line = line + "<i>"
            end if

            line = line + item.key + "<pos=150>" + item.public + "<pos=350>" + item.local + "<pos=550>" + item.type + "<pos=700>" + item.user

            if item.public == context.public and item.local == context.local and item.type == context.type then
                line = line + "</i>"
            end if

            if item.public == context.public and item.local == context.local and item.type == context.type then
                output = output + g.b4(line) + g.const.nl
            else
                output = output + g.l1(line) + g.const.nl
            end if
        end for
    end for

    print output
    return
end function

g.stack.add = function(item)
    updateItem = function(i, item)
        g.stack[i][item.type] = item
        g.stack[i].user = item.getUser

        if item.type == "shell" then
            g.stack[i].computer = item.computer
            g.stack[i].file = item.file
        else if item.type == "computer" then
            g.stack[i].file = item.file
        end if
    end function

    keys = g.stack.indexes

    max = keys.max

    if max < 0 then
        key = str(0)
    else
        key = str(max + 1)
    end if

    for i in keys
        if not i.to_int isa number then continue

        if g.stack[i].public == item.public and g.stack[i].local == item.local and g.stack[i].type == item.type then
            if g.stack[i].user == "guest" or item.getUser == "root" then
                updateItem(i, item)
            end if

            return i
        end if
    end for

    g.stack[key] = item

    return key
end function

g.stack.clear = function
    keys = g.stack.indexes

    for i in keys
        if i.to_int isa number and i.to_int > 0 then
            g.stack.remove(i)
        end if
    end for
end function

// Fill out the parts of this template, and then place it in the a folder called 'tools' in the same directory as the main hex binary file.
// You can leave it as src code (name it with a .src file extension), otherwise hex will attempt to load it as a binary file that has been built with the
// 'allow import' flag set.

g.util.stack = {
    "name": "stack",         // Unformatted tool name text
    "text": g.s2("stack"),   // Tool name text with any formatting you want to use when its name is displayed
    "sortOrder": 500,           // This number will be used to sort this tool in the menu.  Quit is the last built-in item, with sort order 999.
    "exec": @doStack,          // A function reference to the toolName function above.
    "help": @stackHelp,      // A function reference to the help function above.
    "data": {}                  // This map can be used to store any data or additional functions used by the tool that might need to be accessed outside of the tool itself.
}