jumpHelp = function()
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.l2(" If the context is a shell, this will transfer libs to the target computer's file system, and then load them into Hex.  Note that this generates log entries... make sure to clean up after yourself.") + g.const.nl
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

doJump = function(args = null)
    context = g.stack[g.context.index]
    home = g.stack["0"]

    if context.type != "shell" then
        print(g.error("Invalid context type: " + context.type + g.const.ni))
        return
    end if

    print g.const.indent + g.s2("Executing jump on " + context.public + "/" + context.local + "...")

    metax = home.computer.File(g.homePath + "/metaxploit.so")
    crypto = home.computer.File(g.homePath + "/crypto.so")
    apt = g.func.findFile(home.computer.File("/"), "aptclient.so")

    file = context.computer.File(context.path + "/temp")

    if not file then
        context.computer.create_folder(context.path, "temp")
    end if

    home.shell.scp(metax.path, context.path + "/temp", context.shell)
    home.shell.scp(crypto.path, context.path + "/temp", context.shell)
    home.shell.scp(apt.path, context.path + "/temp", context.shell)

    src = "g = get_custom_object" + char(10)
    src = src + "g.stack[g.context.index].apt = g.func.getApt" + char(10)
    src = src + "g.stack[g.context.index].metax = include_lib(""" + g.stack[g.context.index].path + "/temp/metaxploit.so"")" + char(10)
    src = src + "g.stack[g.context.index].crypto = include_lib(""" + g.stack[g.context.index].path + "/temp/crypto.so"")"

    g.func.run(src)
end function

g.util.jump = {
    "name": "jump",
    "shortDescription": "Transfers libs to the target and attaches them to the context.",
    "exec": @doJump,
    "help": @jumpHelp,
    "data": {}
}