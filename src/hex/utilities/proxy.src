proxyHelp = function()
    text = g.const.ni + g.l3("Usage:","u") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" {#}") + g.l2(" Switches the selected proxy to the context in the stack at the provided index.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-c/clean]") + g.l2(" Corrupts the log file on every proxy in the chain of connected proxies. (Note: This only effects contexts in the stack with 'proxy' in the source.)") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-d/disconnect]") + g.l2(" Corrupts the log file on every proxy in the chain of connected proxies, and then removes them from the stack. (Note: This only effects contexts in the stack with 'proxy' in the source.)") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-s/start]") + g.l2(" Connects to each proxy successively, making each new connection from the previous 
    one.  Uses the last one in the chain as the source for attacks that leave logs.") + g.const.ni
    text = text + g.g2(self.name) + g.b3(" [-h/help]") + g.l2(" Displays this help text") + g.const.nl

    print(text)
end function

doProxy = function(args)
    context = g.stack[g.context.index]
    if not context.shell then print(g.error("Current context is not a shell."))

    connectProxies = function
        output = ""

        startingIndex = g.context.index

        for i in range(0, g.proxies.len - 1)
            proxy = g.proxies[i]

            if g.hasIndex("proxy") then
                context = g.stack[g.proxy]
            else
                context = g.stack["0"]
            end if

            if not context.shell then
                output = output + g.error("Current context is not a shell.") + g.const.nl
                return output            
            end if

            ip = proxy[0]
            port = proxy[1]
            user = proxy[2]
            pass = proxy[3]

            shell = context.shell.connect_service(ip, port, user, pass)

            if shell == null then
                output = output + g.error("Failed to connect to " + ip + ":" + port + " with " + user + ":" + pass) + g.const.nl
                continue
            else if typeof(shell) == "string" then
                output = output + g.error("Failed to connect to " + ip + " (" + shell + ")") + g.const.nl
                continue
            else if shell.classID == "ftpshell" then
                output = output + g.error("Expected shell, got ftpshell instead.") + g.const.nl
                continue
            else
                obj = shell.createContext("proxy (" + (i + 1) + ")")
                obj.path = "/root"
                key = g.stack.add(obj)
                g.proxy = key
                g.context.index = key
                g.util.jump.exec
                g.util.log.exec
                output = output + g.const.indent + g.g1("Connected to Proxy " + (i + 1) + " (" + ip + " : " + port + " with " + user + " : " + pass + ")") + g.const.nl
            end if
        end for

        g.context.index = startingIndex

        return output
    end function

    cleanProxies = function(disconnect)
        originalIndex = g.context.index

        for i in g.stack.indexes
            if typeof(i.to_int) != "number" then
                continue
            end if

            context = g.stack[i]
            if context.source.indexOf("proxy") != null then
                g.context.index = i
                g.util.log.exec
                if disconnect then
                    g.stack.remove(i)

                    if originalIndex == i then originalIndex = "0"
                end if
            end if
        end for

        if disconnect then
            g.remove("proxy")
        end if
        g.context.index = originalIndex
    end function

    if args == null or args == [] then
        self.help
    else if args.len == 1 and (args[0] == "-s" or args[0] == "start") then
        g.func.getMap
        print connectProxies
    else if args.len == 1 and (args[0] == "-c" or args[0] == "clean") then
        cleanProxies(0)
    else if args.len == 1 and (args[0] == "-d" or args[0] == "disconnect") then
        cleanProxies(1)
    else if args.len == 1 and typeof(args[0].to_int) == "number" then
        if g.stack.hasIndex(args[0]) then
            oldIndex = g.context.index
            g.proxy = args[0]
            g.context.index = args[0]
            g.util.jump.exec
            g.context.index = oldIndex
        else
            print(g.error("The specified index does not exist in the stack."))
        end if
    else
        self.help
    end if
end function

g.util.proxy = {
    "name": "proxy",
    "shortDescription": "Manages the proxy chain.",
    "exec": @doProxy,
    "help": @proxyHelp,
    "data": {}
}