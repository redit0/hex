//-- Here's some example code that shows a simple remote exploit loop.

metax = include_lib("/path/to/metaxploit.so")

ip = "ip.add.re.ss"
port = "22" //-- This is a string, so we have to call to_int below (or val)

netSession = metax.net_use(@ip, @port.to_int)

if not netSession then exit("Something went wrong with the call to net_use.")

metaLib = netSession.dump_lib

addresses = metax.scan(metaLib)

for address in addresses
    output = metax.scan_address(metaLib, address)

    if output == null then
        print "Something went wrong attempting to scan this address: " + address
        continue
    end if

    //-- print the vulnerabilities just to satisfy curiosity
    print output

    //-- split on the string "Unsafe check: " because it is a good delimiter between one vulnerability and the next
    //-- split gives us an array of strings.  slice the array with [1:] to skip the first item.
    lines = output.split("Unsafe check: ")[1:]

    for line in lines
        //-- get a substring starting at the opening "bold" tag, and ending at the closing "bold" tag
        //-- we do this because the value we want is bolded in the output, so this extracts just the text between the bold tags
        value = line[line.indexOf("<b>")+3:line.indexOf("</b>")]

        //-- run the exploit.  exploitResult will be a shell, computer, file, or number.
        //-- optionally, we can pass in a third parameter if we're trying for a bounce, or a password reset.
        exploitResult = metaLib.overflow(address, value)

        //-- do something with the result of the exploit...
    end for
end for

